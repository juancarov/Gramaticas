Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> lineas
Rule 1     lineas -> lineas linea
Rule 2     lineas -> linea
Rule 3     linea -> A sub_cadena B SALTO_LINEA
Rule 4     linea -> error SALTO_LINEA
Rule 5     sub_cadena -> <empty>
Rule 6     sub_cadena -> A B sub_cadena

Terminals, with rules where they appear

A                    : 3 6
B                    : 3 6
SALTO_LINEA          : 3 4
error                : 4

Nonterminals, with rules where they appear

linea                : 1 2
lineas               : 1 0
sub_cadena           : 3 6

Parsing method: LALR

state 0

    (0) S' -> . lineas
    (1) lineas -> . lineas linea
    (2) lineas -> . linea
    (3) linea -> . A sub_cadena B SALTO_LINEA
    (4) linea -> . error SALTO_LINEA

    A               shift and go to state 3
    error           shift and go to state 4

    lineas                         shift and go to state 1
    linea                          shift and go to state 2

state 1

    (0) S' -> lineas .
    (1) lineas -> lineas . linea
    (3) linea -> . A sub_cadena B SALTO_LINEA
    (4) linea -> . error SALTO_LINEA

    A               shift and go to state 3
    error           shift and go to state 4

    linea                          shift and go to state 5

state 2

    (2) lineas -> linea .

    A               reduce using rule 2 (lineas -> linea .)
    error           reduce using rule 2 (lineas -> linea .)
    $end            reduce using rule 2 (lineas -> linea .)


state 3

    (3) linea -> A . sub_cadena B SALTO_LINEA
    (5) sub_cadena -> .
    (6) sub_cadena -> . A B sub_cadena

    B               reduce using rule 5 (sub_cadena -> .)
    A               shift and go to state 6

    sub_cadena                     shift and go to state 7

state 4

    (4) linea -> error . SALTO_LINEA

    SALTO_LINEA     shift and go to state 8


state 5

    (1) lineas -> lineas linea .

    A               reduce using rule 1 (lineas -> lineas linea .)
    error           reduce using rule 1 (lineas -> lineas linea .)
    $end            reduce using rule 1 (lineas -> lineas linea .)


state 6

    (6) sub_cadena -> A . B sub_cadena

    B               shift and go to state 9


state 7

    (3) linea -> A sub_cadena . B SALTO_LINEA

    B               shift and go to state 10


state 8

    (4) linea -> error SALTO_LINEA .

    A               reduce using rule 4 (linea -> error SALTO_LINEA .)
    error           reduce using rule 4 (linea -> error SALTO_LINEA .)
    $end            reduce using rule 4 (linea -> error SALTO_LINEA .)


state 9

    (6) sub_cadena -> A B . sub_cadena
    (5) sub_cadena -> .
    (6) sub_cadena -> . A B sub_cadena

    B               reduce using rule 5 (sub_cadena -> .)
    A               shift and go to state 6

    sub_cadena                     shift and go to state 11

state 10

    (3) linea -> A sub_cadena B . SALTO_LINEA

    SALTO_LINEA     shift and go to state 12


state 11

    (6) sub_cadena -> A B sub_cadena .

    B               reduce using rule 6 (sub_cadena -> A B sub_cadena .)


state 12

    (3) linea -> A sub_cadena B SALTO_LINEA .

    A               reduce using rule 3 (linea -> A sub_cadena B SALTO_LINEA .)
    error           reduce using rule 3 (linea -> A sub_cadena B SALTO_LINEA .)
    $end            reduce using rule 3 (linea -> A sub_cadena B SALTO_LINEA .)

